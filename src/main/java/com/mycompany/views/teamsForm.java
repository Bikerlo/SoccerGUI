/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.views;

import com.mycompany.interfaces.PresidentDAO;
import com.mycompany.interfaces.PresidentDAOimpl;
import com.mycompany.interfaces.teamDAO;
import com.mycompany.interfaces.teamDAOimpl;
import com.mycompany.models.President;
import com.mycompany.models.team;
import static com.mycompany.util.DateConverter.dateToStr;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author torre
 */
public class teamsForm extends javax.swing.JPanel {
    
    boolean isEdition = false;
    com.mycompany.models.team teamEdition;
    int idPresident;

    /**
     * Creates new form teamsForms
     * @throws java.lang.ClassNotFoundException
     * @throws java.sql.SQLException
     */
    public teamsForm() throws ClassNotFoundException, SQLException, Exception {
        initComponents();
        loadPresidents();
    }
    
    public teamsForm(team teamById) {
        initComponents();
        isEdition = true;
        teamEdition = teamById;
        InitStyles();
    }
     private void InitStyles() {
        title.putClientProperty("FlatLaf.styleClass", "h1");
        title.setForeground(Color.black);
        nameText.putClientProperty("JTextField.placeholderText", "Ingrese el Nombre del equipo");
        stadiumText.putClientProperty("JTextField.placeholderText", "Ingrese el Nombre del estadio");
        qtyText.putClientProperty("JTextField.placeholderText", "Ingrese el aforo del estadio");
        cityText.putClientProperty("JTextField.placeholderText", "Ingrese el nombre de la ciudad del equipo");
        yearText.putClientProperty("JTextField.placeholderText", "Ingrese la fecha de creacion del equipo");
        presidentCombo.putClientProperty("JTextField.placeholderText", "Ingrese la fecha de creacion del equipo");
        
        if (isEdition) {
            title.setText("Editar Equipo");
            button.setText("Guardar");

            if (teamEdition != null) {
                nameText.setText(teamEdition.getName());
                stadiumText.setText(teamEdition.getStadium());
                qtyText.setText(String.valueOf(teamEdition.getCapacity()));
                cityText.setText(teamEdition.getCity());
                yearText.setDate(teamEdition.getFoundationYear());
                presidentCombo.setSelectedItem(teamEdition);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        nameLbl = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        apPLbl = new javax.swing.JLabel();
        stadiumText = new javax.swing.JTextField();
        apMLbl = new javax.swing.JLabel();
        qtyText = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        domLbl = new javax.swing.JLabel();
        cityText = new javax.swing.JTextField();
        button = new javax.swing.JButton();
        phoneLbl = new javax.swing.JLabel();
        yearText = new com.toedter.calendar.JDateChooser();
        presidentCombo = new javax.swing.JComboBox<>();
        phoneLbl1 = new javax.swing.JLabel();

        bg.setBackground(new java.awt.Color(255, 255, 255));

        title.setText("Registrar un nuevo Equipo de Futbol");

        nameLbl.setText("Nombre");

        apPLbl.setText("Estadio");

        apMLbl.setText("Aforo");

        jSeparator1.setForeground(new java.awt.Color(204, 204, 204));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(200, 10));

        domLbl.setText("Ciudad");

        cityText.setToolTipText("");

        button.setBackground(new java.awt.Color(255, 0, 0));
        button.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        button.setForeground(new java.awt.Color(255, 255, 255));
        button.setText("Registrar");
        button.setBorderPainted(false);
        button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });

        phoneLbl.setText("Anio Fundacion");

        yearText.setDateFormatString("yyyy-M-d");

        presidentCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        presidentCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presidentComboActionPerformed(evt);
            }
        });

        phoneLbl1.setText("Presidente");

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(nameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                                .addGap(223, 223, 223))
                            .addComponent(nameText)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(apPLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(182, 182, 182))
                            .addComponent(stadiumText)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(apMLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(180, 180, 180))
                            .addComponent(qtyText))
                        .addGap(68, 68, 68)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cityText)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(domLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(220, 220, 220))
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(phoneLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                .addGap(218, 218, 218))
                            .addComponent(button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(yearText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(presidentCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(phoneLbl1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))
                        .addGap(72, 72, 72))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(553, 553, 553))))
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(nameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(apPLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stadiumText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(apMLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(qtyText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(170, 170, 170))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(domLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cityText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(phoneLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(phoneLbl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4)
                        .addComponent(presidentCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(26, 26, 26))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionPerformed
        String teamName = nameText.getText();
        String stadiumName = stadiumText.getText();
        String qty = qtyText.getText();
        String city = cityText.getText();
        Date foundation = yearText.getDate();
        int president = this.idPresident;
        
        
        
        // Validaciones para los campos
        if (teamName.isEmpty() || stadiumName.isEmpty() || qty.isEmpty()|| city.isEmpty() ||  foundation==null) {
            System.out.println(teamName+stadiumName+qty+city+dateToStr(foundation));
            javax.swing.JOptionPane.showMessageDialog(this, "Debe llenar todos los campos. \n", "AVISO", javax.swing.JOptionPane.ERROR_MESSAGE);
            nameText.requestFocus();
            return;
        }

        com.mycompany.models.team team = isEdition ? teamEdition : new com.mycompany.models.team();
        team.setName(teamName);
        team.setStadium(stadiumName);
        team.setCapacity(Integer.parseInt(qty));
        team.setCity(city);
        team.setFoundationYear(foundation);
        team.setPresidentId(president);
        
        try {
            teamDAO dao = new teamDAOimpl();
       
            if (!isEdition) {
                dao.create(team);
            } else {
                dao.update(team);
            }

            String successMsg = isEdition ? "modificado" : "registrado";

            javax.swing.JOptionPane.showMessageDialog(this, "Equipo " + successMsg + " exitosamente.\n", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            if (!isEdition) {
                nameText.setText("");
                stadiumText.setText("");
                qtyText.setText("");
                cityText.setText("");
                yearText.setDate(null);
                
            }
        } catch (HeadlessException e) {
            String errorMsg = isEdition ? "modificar" : "registrar";
            javax.swing.JOptionPane.showMessageDialog(this, "Ocurrió un error al " + errorMsg + " el equipo. \n", "AVISO", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(e.getMessage());
        }
        
    }//GEN-LAST:event_buttonActionPerformed

    private void presidentComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presidentComboActionPerformed
        
    }//GEN-LAST:event_presidentComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel apMLbl;
    private javax.swing.JLabel apPLbl;
    private javax.swing.JPanel bg;
    private javax.swing.JButton button;
    private javax.swing.JTextField cityText;
    private javax.swing.JLabel domLbl;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel phoneLbl;
    private javax.swing.JLabel phoneLbl1;
    private javax.swing.JComboBox<String> presidentCombo;
    private javax.swing.JTextField qtyText;
    private javax.swing.JTextField stadiumText;
    private javax.swing.JLabel title;
    private com.toedter.calendar.JDateChooser yearText;
    // End of variables declaration//GEN-END:variables

    private void loadPresidents() throws ClassNotFoundException, SQLException, Exception {
       /*
        DefaultComboBoxModel combo = new DefaultComboBoxModel();
        presidentCombo.setModel(combo);
        PresidentDAO dao = new PresidentDAOimpl();

        List<President> lista=dao.listAll("");
     
        lista.stream()
            .map(objeto -> objeto.getName()) 
            .forEachOrdered(nombre -> combo.addElement(nombre));
        */
        DefaultComboBoxModel<String> combo = new DefaultComboBoxModel<>(); // Especifica el tipo de datos del modelo como String
        presidentCombo.setModel(combo);
        PresidentDAO dao = new PresidentDAOimpl();

        // Crea un HashMap para mapear IDs a nombres
        HashMap<Integer, String> idToNameMap = new HashMap<>();

        List<President> lista = dao.listAll(""); // Asegúrate de que la lista contenga objetos de tipo President (ajusta el tipo según tu caso)

        // Llena el JComboBox y el HashMap
        for (President presidente : lista) {
            String nombre = presidente.getName();
            int id = presidente.getID();

            combo.addElement(nombre); // Agrega el nombre al JComboBox
            idToNameMap.put(id, nombre); // Mapea el ID al nombre en el HashMap
        }

        // Evento al seleccionar un nombre en el JComboBox
        presidentCombo.addActionListener((ActionEvent e) -> {
            String nombreSeleccionado = (String) presidentCombo.getSelectedItem();
            // Obtiene el ID correspondiente al nombre seleccionado
            for (Map.Entry<Integer, String> entry : idToNameMap.entrySet()) {
                if (entry.getValue().equals(nombreSeleccionado)) {
                    int idSeleccionado = entry.getKey();
                    // Ahora puedes utilizar 'idSeleccionado' en tu consulta de inserción con la llave foránea.
                    System.out.println("ID seleccionado: " + idSeleccionado);
                    this.idPresident=idSeleccionado;
                    break;
                }
            }
        });
    }

}
